#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de teste para verificar as informa√ß√µes do sistema salvas no banco de dados.
Este script demonstra como consultar os dados salvos pelas funcionalidades implementadas.
"""

import sys
import os
from datetime import datetime

# Adiciona o diret√≥rio atual ao path para importar os m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import db_manager

def test_system_info_retrieval():
    """Testa a recupera√ß√£o das informa√ß√µes do sistema do banco de dados."""
    print("\n" + "="*80)
    print("üîç TESTE DE CONSULTA - INFORMA√á√ïES DO SISTEMA NO BANCO DE DADOS")
    print("="*80)
    
    try:
        # Conecta ao banco de dados
        if not db_manager.ensure_connected():
            print("‚ùå Erro: N√£o foi poss√≠vel conectar ao banco de dados")
            return False
        
        print("‚úÖ Conex√£o com o banco de dados estabelecida")
        
        # Busca as informa√ß√µes mais recentes do sistema
        print("\nüìä Buscando informa√ß√µes mais recentes do sistema...")
        latest_info = db_manager.get_latest_system_info()
        
        if not latest_info:
            print("‚ö†Ô∏è  Nenhuma informa√ß√£o do sistema encontrada no banco de dados")
            return False
        
        # Exibe as informa√ß√µes recuperadas
        print(f"\nüìã INFORMA√á√ïES RECUPERADAS DO BANCO:")
        print(f"   ‚Ä¢ ID do Registro: {latest_info['id']}")
        print(f"   ‚Ä¢ Timestamp: {latest_info['timestamp']}")
        
        if 'process' in latest_info:
            process = latest_info['process']
            print(f"\nüîß PROCESSO:")
            print(f"   ‚Ä¢ PID: {process['pid']}")
            print(f"   ‚Ä¢ Nome: {process['name']}")
            print(f"   ‚Ä¢ Status: {process['status']}")
            print(f"   ‚Ä¢ Mem√≥ria: {process['memory_mb']} MB")
            print(f"   ‚Ä¢ Iniciado em: {process['started_at']}")
            print(f"   ‚Ä¢ PSUtil Version: {process['psutil_version']}")
            print(f"   ‚Ä¢ Plataforma: {process['platform']}")
        
        if 'network' in latest_info:
            network = latest_info['network']
            print(f"\nüåê REDE:")
            print(f"   ‚Ä¢ Hostname: {network['hostname']}")
            print(f"   ‚Ä¢ IP Local: {network['local_ip']}")
            print(f"   ‚Ä¢ IP do Roteador: {network['router_ip']}")
            print(f"   ‚Ä¢ IP Externo: {network['external_ip']}")
            print(f"   ‚Ä¢ IPv6: {network['ipv6']}")
            print(f"   ‚Ä¢ Porta: {network['port']}")
            print(f"   ‚Ä¢ URL: {network['url']}")
            print(f"   ‚Ä¢ MAC Address: {network['mac_address']}")
        
        if 'cpu' in latest_info:
            cpu = latest_info['cpu']
            print(f"\nüíª CPU:")
            print(f"   ‚Ä¢ Nome: {cpu['name']}")
            print(f"   ‚Ä¢ N√∫cleos F√≠sicos: {cpu['physical_cores']}")
            print(f"   ‚Ä¢ N√∫cleos L√≥gicos: {cpu['logical_cores']}")
            print(f"   ‚Ä¢ Frequ√™ncia Atual: {cpu['current_freq']} MHz" if cpu['current_freq'] else "   ‚Ä¢ Frequ√™ncia Atual: N√£o dispon√≠vel")
            print(f"   ‚Ä¢ Frequ√™ncia M√°xima: {cpu['max_freq']} MHz" if cpu['max_freq'] else "   ‚Ä¢ Frequ√™ncia M√°xima: N√£o dispon√≠vel")
            print(f"   ‚Ä¢ Uso: {cpu['usage_percent']}%")
        
        if 'gpu' in latest_info and latest_info['gpu']:
            print(f"\nüéÆ GPU(s):")
            for gpu in latest_info['gpu']:
                print(f"   ‚Ä¢ GPU {gpu['index']}: {gpu['name']}")
                print(f"     ‚îî‚îÄ Mem√≥ria: {gpu['memory']}")
        
        print(f"\n‚úÖ Teste conclu√≠do com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        return False
    finally:
        # Desconecta do banco de dados
        db_manager.disconnect()
        print(f"\nüîå Conex√£o com o banco de dados encerrada")

def test_system_info_count():
    """Testa a contagem de registros de informa√ß√µes do sistema."""
    print("\n" + "="*80)
    print("üìä TESTE DE CONTAGEM - REGISTROS NO BANCO DE DADOS")
    print("="*80)
    
    try:
        if not db_manager.ensure_connected():
            print("‚ùå Erro: N√£o foi poss√≠vel conectar ao banco de dados")
            return False
        
        # Conta registros em cada tabela
        tables = [
            ('system_info_logs', 'Logs do Sistema'),
            ('system_network_info', 'Informa√ß√µes de Rede'),
            ('system_cpu_info', 'Informa√ß√µes de CPU'),
            ('system_gpu_info', 'Informa√ß√µes de GPU')
        ]
        
        print("\nüìà CONTAGEM DE REGISTROS:")
        for table_name, description in tables:
            try:
                db_manager.cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = db_manager.cursor.fetchone()[0]
                print(f"   ‚Ä¢ {description}: {count} registro(s)")
            except Exception as e:
                print(f"   ‚Ä¢ {description}: Erro ao contar - {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste de contagem: {e}")
        return False

def main():
    """Fun√ß√£o principal do script de teste."""
    print("üß™ INICIANDO TESTES DO BANCO DE DADOS - INFORMA√á√ïES DO SISTEMA")
    
    # Teste 1: Contagem de registros
    success1 = test_system_info_count()
    
    # Teste 2: Recupera√ß√£o de informa√ß√µes
    success2 = test_system_info_retrieval()
    
    print("\n" + "="*80)
    if success1 and success2:
        print("üéâ TODOS OS TESTES FORAM EXECUTADOS COM SUCESSO!")
        print("‚úÖ As funcionalidades de banco de dados est√£o funcionando corretamente")
    else:
        print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
        print("üîß Verifique a configura√ß√£o do banco de dados e as tabelas")
    print("="*80)

if __name__ == "__main__":
    main()